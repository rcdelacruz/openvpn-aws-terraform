# Instance Information
output "instance_ids" {
  description = "IDs of OpenVPN instances"
  value       = module.openvpn_server.instance_ids
}

output "public_ips" {
  description = "Public IP addresses of OpenVPN instances"
  value       = module.openvpn_server.public_ips
}

output "private_ips" {
  description = "Private IP addresses of OpenVPN instances"
  value       = module.openvpn_server.private_ips
}

output "public_dns" {
  description = "Public DNS names of OpenVPN instances"
  value       = module.openvpn_server.public_dns
}

# Access Information
output "admin_web_url" {
  description = "URL for OpenVPN Access Server admin interface"
  value = var.domain_name != "" && var.create_dns_record ? 
    "https://${var.domain_name}:${var.admin_port}/admin" :
    length(module.openvpn_server.public_ips) > 0 ? "https://${module.openvpn_server.public_ips[0]}:${var.admin_port}/admin" : null
}

output "client_web_url" {
  description = "URL for OpenVPN Access Server client interface"
  value = var.domain_name != "" && var.create_dns_record ? 
    "https://${var.domain_name}:${var.client_web_port}/" :
    length(module.openvpn_server.public_ips) > 0 ? "https://${module.openvpn_server.public_ips[0]}:${var.client_web_port}/" : null
}

output "openvpn_tcp_endpoint" {
  description = "OpenVPN TCP endpoint"
  value = var.domain_name != "" && var.create_dns_record ? 
    "${var.domain_name}:${var.tcp_port}" :
    length(module.openvpn_server.public_ips) > 0 ? "${module.openvpn_server.public_ips[0]}:${var.tcp_port}" : null
}

output "openvpn_udp_endpoint" {
  description = "OpenVPN UDP endpoint"
  value = var.domain_name != "" && var.create_dns_record ? 
    "${var.domain_name}:${var.udp_port}" :
    length(module.openvpn_server.public_ips) > 0 ? "${module.openvpn_server.public_ips[0]}:${var.udp_port}" : null
}

# Authentication Information
output "admin_username" {
  description = "Admin username for OpenVPN Access Server"
  value       = var.admin_user
}

output "admin_password" {
  description = "Admin password for OpenVPN Access Server"
  value       = var.admin_password != "" ? "<provided>" : "<auto-generated>"
  sensitive   = false
}

output "admin_password_command" {
  description = "Command to retrieve admin password from AWS Systems Manager"
  value       = "aws ssm get-parameter --name '/${var.name_prefix}/openvpn/admin_password' --with-decryption --query 'Parameter.Value' --output text --region ${var.aws_region}"
}

# Network Information
output "vpc_id" {
  description = "ID of the VPC"
  value       = var.create_vpc ? module.vpc[0].vpc_id : var.existing_vpc_id
}

output "subnet_ids" {
  description = "IDs of subnets used"
  value       = var.create_vpc ? module.vpc[0].public_subnet_ids : data.aws_subnets.existing_public[0].ids
}

output "security_group_ids" {
  description = "Security group IDs"
  value = {
    openvpn = module.security_groups.openvpn_sg_id
    admin   = module.security_groups.admin_sg_id
  }
}

# Key Pair Information
output "key_pair_name" {
  description = "Name of the key pair used"
  value       = var.create_key_pair ? module.key_pair[0].key_name : var.existing_key_pair_name
}

output "private_key_ssm_parameter" {
  description = "SSM parameter name containing the private key"
  value       = var.create_key_pair ? module.key_pair[0].private_key_ssm_parameter : null
}

output "ssh_command" {
  description = "SSH command to connect to the instance"
  value = var.create_key_pair && length(module.openvpn_server.public_ips) > 0 ? 
    "aws ssm get-parameter --name '${module.key_pair[0].private_key_ssm_parameter}' --with-decryption --query 'Parameter.Value' --output text > /tmp/openvpn-key.pem && chmod 600 /tmp/openvpn-key.pem && ssh -i /tmp/openvpn-key.pem openvpnas@${module.openvpn_server.public_ips[0]}" : null
}

# DNS Information
output "dns_record" {
  description = "DNS record created (if applicable)"
  value = var.create_dns_record && var.domain_name != "" ? {
    domain = var.domain_name
    zone_id = var.hosted_zone_id
  } : null
}

# Monitoring Information
output "monitoring_enabled" {
  description = "Whether monitoring is enabled"
  value       = var.enable_monitoring
}

output "sns_topic_arn" {
  description = "SNS topic ARN for alerts"
  value       = var.enable_monitoring && var.create_sns_topic ? module.monitoring[0].sns_topic_arn : null
}

# Backup Information
output "backup_enabled" {
  description = "Whether backup is enabled"
  value       = var.enable_backup
}

output "backup_bucket" {
  description = "S3 bucket for backups"
  value       = var.enable_backup ? module.backup[0].backup_bucket_name : null
}

# Quick Setup Summary
output "quick_setup_summary" {
  description = "Quick setup summary with all important information"
  value = {
    admin_url = var.domain_name != "" && var.create_dns_record ? 
      "https://${var.domain_name}:${var.admin_port}/admin" :
      length(module.openvpn_server.public_ips) > 0 ? "https://${module.openvpn_server.public_ips[0]}:${var.admin_port}/admin" : null
    client_url = var.domain_name != "" && var.create_dns_record ? 
      "https://${var.domain_name}:${var.client_web_port}/" :
      length(module.openvpn_server.public_ips) > 0 ? "https://${module.openvpn_server.public_ips[0]}:${var.client_web_port}/" : null
    admin_user = var.admin_user
    password_retrieval_command = "aws ssm get-parameter --name '/${var.name_prefix}/openvpn/admin_password' --with-decryption --query 'Parameter.Value' --output text --region ${var.aws_region}"
    ssh_access = var.create_key_pair && length(module.openvpn_server.public_ips) > 0 ? 
      "Use SSH key from SSM Parameter: ${module.key_pair[0].private_key_ssm_parameter}" : "Use existing key pair"
  }
}